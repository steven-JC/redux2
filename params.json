{"name":"Redux2","tagline":"Write less, more specific, the react application architectural toolkit, which is based on redux.","body":"Redux2\r\n========\r\nWrite less, more specific, the react application architectural toolkit, which is based on redux.\r\n\r\n[![Build Status][travis-image]][travis-url]\r\n[![Dependency Status][gemnasium-image]][gemnasium-url]\r\n[![Coverage Status][coveralls-image]][coveralls-url]\r\n[![NPM version][npm-image]][npm-url]\r\n[![Windows Tests][windows-image]][windows-url]\r\n\r\n> Redux2 is the official successor to optimist. Please feel free to submit issues and pull requests. If you'd like to contribute and don't know where to start, have a look at [the issue list](https://github.com/stevenCJC/redux2/issues) :)\r\n\r\n### Getting started \r\n\r\n````javascript\r\nnpm install redux2 --save\r\n````\r\n\r\n\r\nexamples\r\n========\r\n\r\n\r\n### your index file of your application should be like this:\r\napp.js:\r\n-------------------------------------------------------------------\r\n\r\n````javascript\r\nimport 'babel-polyfill'\r\nimport React,{Component} from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, compose, applyMiddleware ,combineReducers } from 'redux'\r\nimport { ReduxRouter, routerStateReducer, reduxReactRouter} from 'redux-router';\r\nimport { Route, IndexRoute, Redirect} from 'react-router';\r\nimport {createHistory} from 'history'\r\n\r\nimport {redux2, reducerMaker, redux2Middleware} from 'redux2'\r\n\r\n// use the function \"require.context\" of webpack to collect all of models\r\nvar reduc=reducerMaker([require.context('./actions', false, /\\.js$/)]);\r\n\r\nconst reducers=combineReducers({...reduc, router: routerStateReducer});\r\n\r\nconst store = compose(\r\n\tapplyMiddleware( redux2Middleware()),\r\n\treduxReactRouter({createHistory})\r\n)(createStore)(reducers);\r\n\r\nredux2(store);\r\n\r\nclass Root extends Component {\r\n\trender(){return (\r\n\t\t<Provider store={store}>\r\n\t\t\t<ReduxRouter>\r\n\t\t\t\t<Route path=\"/\" component={require('./page/Home')}/>\r\n\t\t\t</ReduxRouter>\r\n\t\t</Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render(<Root/>, document.querySelector('#container'));\r\n````\r\n\r\n\r\n\r\nTo implement requirement , you need a model and a UI compenent with redux2.\r\n\r\nmodelName.js \r\n-------------------------------------------------------------------\r\n\r\n>the extention '.js' of model filename is recommended, as the extention '.jsx' of UI compenent filename is recommended\r\n\r\n````javascript\r\n\r\n// when the application init, it would be set to store as default state of current model,\r\n// and it should be an plan object\r\nexport default {n:0};\r\n\r\n\r\n// the function name should be unique in your application,\r\nexport function sum() {\r\n\treturn async (dispatch, getState) => {\r\n\r\n\t\t// \"getState\" would get state of current model with no parameter\r\n\t\t// passing a model file name without extention as parameter will get the state of other model.\r\n\t\t// const {m}= getState('otherModelName');\r\n\t\tconst {n}= getState();\r\n\r\n\t\t// passing a string as the first parameter to dispatch, it will call another function of model in your application\r\n\t\t// the second parameter would be passed to the dispatched function as argument.\r\n\t\t// in async function, you can get the result returned by the dispatched function with \"await\"\r\n\t\tvar r=await dispatch('asyncGet', {n:33});\r\n\t\tvar rr=await dispatch('normalGet');\r\n\t\tvar rrr=await dispatch('get');\r\n\t\tvar rrrr=await dispatch('getByAsyncGet');\r\n\r\n        \t// the returned object will update the state of current model and also reflected in UI compenent\r\n\t\treturn {\r\n\t\t\tn: n + r.n + rr.n + rrr.n + rrrr.n\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport function asyncGet(options) {\r\n\treturn async (dispatch, getState) => {\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tsetTimeout(() => { resolve({n:options.n}); }, 1000);\r\n\t\t});\r\n\t}\r\n}\r\nexport function normalGet() {\r\n\treturn (dispatch, getState) => {\r\n\t    let {m}=getState('otherModel');\r\n\t\treturn {n:888}\r\n\t}\r\n}\r\nexport function get() {\r\n\treturn {n:555}\r\n}\r\nexport function getByAsyncGet() {\r\n\treturn async (dispatch, getState) => {\r\n\t\treturn await dispatch('asyncGet');\r\n\t}\r\n}\r\n\r\n````\r\n\r\nYou can call a function of model by dispatch a string as the first parameter, without importing a model file.\r\n\r\nHome.jsx\r\n-------------------------------------------------------------------\r\n````javascript\r\nimport { Component, PropTypes } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n@connect(state=>({counter: {n: state.counter.n}}))\r\nexport default class Counter extends Component {\r\n    sum() {\r\n        // you can pass the second parameter as an argument to the dispatched function of model if you need\r\n        // this.props.dispatch('sum',options);\r\n        this.props.dispatch('sum');\r\n    }\r\n\r\n    render() {\r\n        const {  counter} = this.props;\r\n        return (\r\n            <p>\r\n                Result is here: {counter.n}\r\n                {' '}\r\n                <button onClick={this.sum.bind(this)}>Sum</button>\r\n            </p>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n````\r\n\r\nYou can also dispatch the function of model by the method 'require('redux2').dispatch'.\r\n\r\n````javascript\r\n\r\nvar dispatch = require('redux2').dispatch;\r\nwindow.onload=function(){\r\n\tdispatch('hello',{'msg':'world'});\r\n};\r\n\r\n````\r\n\r\n\r\n\r\n\r\n[travis-url]: https://travis-ci.org/bcoe/yargs\r\n[travis-image]: https://img.shields.io/travis/bcoe/yargs.svg\r\n[gemnasium-url]: https://gemnasium.com/bcoe/yargs\r\n[gemnasium-image]: https://img.shields.io/gemnasium/bcoe/yargs.svg\r\n[coveralls-url]: https://coveralls.io/github/bcoe/yargs\r\n[coveralls-image]: https://img.shields.io/coveralls/bcoe/yargs.svg\r\n[npm-url]: https://www.npmjs.com/package/yargs\r\n[npm-image]: https://img.shields.io/npm/v/yargs.svg\r\n[windows-url]: https://ci.appveyor.com/project/bcoe/yargs\r\n[windows-image]: https://img.shields.io/appveyor/ci/bcoe/yargs/master.svg?label=Windows%20Tests\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}